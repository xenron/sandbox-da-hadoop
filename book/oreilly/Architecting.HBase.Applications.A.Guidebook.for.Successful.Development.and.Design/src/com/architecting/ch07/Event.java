/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.architecting.ch07;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"com.architecting.ch09\",\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"eventId\",\"type\":\"string\"},{\"name\":\"docType\",\"type\":\"string\"},{\"name\":\"partName\",\"type\":\"string\"},{\"name\":\"partNumber\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"long\"},{\"name\":\"payload\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence Id;
  @Deprecated public java.lang.CharSequence eventId;
  @Deprecated public java.lang.CharSequence docType;
  @Deprecated public java.lang.CharSequence partName;
  @Deprecated public java.lang.CharSequence partNumber;
  @Deprecated public long version;
  @Deprecated public java.lang.CharSequence payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Event() {}

  /**
   * All-args constructor.
   */
  public Event(java.lang.CharSequence Id, java.lang.CharSequence eventId, java.lang.CharSequence docType, java.lang.CharSequence partName, java.lang.CharSequence partNumber, java.lang.Long version, java.lang.CharSequence payload) {
    this.Id = Id;
    this.eventId = eventId;
    this.docType = docType;
    this.partName = partName;
    this.partNumber = partNumber;
    this.version = version;
    this.payload = payload;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Id;
    case 1: return eventId;
    case 2: return docType;
    case 3: return partName;
    case 4: return partNumber;
    case 5: return version;
    case 6: return payload;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Id = (java.lang.CharSequence)value$; break;
    case 1: eventId = (java.lang.CharSequence)value$; break;
    case 2: docType = (java.lang.CharSequence)value$; break;
    case 3: partName = (java.lang.CharSequence)value$; break;
    case 4: partNumber = (java.lang.CharSequence)value$; break;
    case 5: version = (java.lang.Long)value$; break;
    case 6: payload = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Id' field.
   */
  public java.lang.CharSequence getId() {
    return Id;
  }

  /**
   * Sets the value of the 'Id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.Id = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   */
  public java.lang.CharSequence getEventId() {
    return eventId;
  }

  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'docType' field.
   */
  public java.lang.CharSequence getDocType() {
    return docType;
  }

  /**
   * Sets the value of the 'docType' field.
   * @param value the value to set.
   */
  public void setDocType(java.lang.CharSequence value) {
    this.docType = value;
  }

  /**
   * Gets the value of the 'partName' field.
   */
  public java.lang.CharSequence getPartName() {
    return partName;
  }

  /**
   * Sets the value of the 'partName' field.
   * @param value the value to set.
   */
  public void setPartName(java.lang.CharSequence value) {
    this.partName = value;
  }

  /**
   * Gets the value of the 'partNumber' field.
   */
  public java.lang.CharSequence getPartNumber() {
    return partNumber;
  }

  /**
   * Sets the value of the 'partNumber' field.
   * @param value the value to set.
   */
  public void setPartNumber(java.lang.CharSequence value) {
    this.partNumber = value;
  }

  /**
   * Gets the value of the 'version' field.
   */
  public java.lang.Long getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.Long value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'payload' field.
   */
  public java.lang.CharSequence getPayload() {
    return payload;
  }

  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.lang.CharSequence value) {
    this.payload = value;
  }

  /** Creates a new Event RecordBuilder */
  public static com.architecting.ch07.Event.Builder newBuilder() {
    return new com.architecting.ch07.Event.Builder();
  }
  
  /** Creates a new Event RecordBuilder by copying an existing Builder */
  public static com.architecting.ch07.Event.Builder newBuilder(com.architecting.ch07.Event.Builder other) {
    return new com.architecting.ch07.Event.Builder(other);
  }
  
  /** Creates a new Event RecordBuilder by copying an existing Event instance */
  public static com.architecting.ch07.Event.Builder newBuilder(com.architecting.ch07.Event other) {
    return new com.architecting.ch07.Event.Builder(other);
  }
  
  /**
   * RecordBuilder for Event instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event>
    implements org.apache.avro.data.RecordBuilder<Event> {

    private java.lang.CharSequence Id;
    private java.lang.CharSequence eventId;
    private java.lang.CharSequence docType;
    private java.lang.CharSequence partName;
    private java.lang.CharSequence partNumber;
    private long version;
    private java.lang.CharSequence payload;

    /** Creates a new Builder */
    private Builder() {
      super(com.architecting.ch07.Event.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.architecting.ch07.Event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.docType)) {
        this.docType = data().deepCopy(fields()[2].schema(), other.docType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.partName)) {
        this.partName = data().deepCopy(fields()[3].schema(), other.partName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.partNumber)) {
        this.partNumber = data().deepCopy(fields()[4].schema(), other.partNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.version)) {
        this.version = data().deepCopy(fields()[5].schema(), other.version);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.payload)) {
        this.payload = data().deepCopy(fields()[6].schema(), other.payload);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Event instance */
    private Builder(com.architecting.ch07.Event other) {
            super(com.architecting.ch07.Event.SCHEMA$);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.docType)) {
        this.docType = data().deepCopy(fields()[2].schema(), other.docType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.partName)) {
        this.partName = data().deepCopy(fields()[3].schema(), other.partName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.partNumber)) {
        this.partNumber = data().deepCopy(fields()[4].schema(), other.partNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.version)) {
        this.version = data().deepCopy(fields()[5].schema(), other.version);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.payload)) {
        this.payload = data().deepCopy(fields()[6].schema(), other.payload);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'Id' field */
    public java.lang.CharSequence getId() {
      return Id;
    }
    
    /** Sets the value of the 'Id' field */
    public com.architecting.ch07.Event.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'Id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'Id' field */
    public com.architecting.ch07.Event.Builder clearId() {
      Id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'eventId' field */
    public java.lang.CharSequence getEventId() {
      return eventId;
    }
    
    /** Sets the value of the 'eventId' field */
    public com.architecting.ch07.Event.Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.eventId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'eventId' field has been set */
    public boolean hasEventId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'eventId' field */
    public com.architecting.ch07.Event.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'docType' field */
    public java.lang.CharSequence getDocType() {
      return docType;
    }
    
    /** Sets the value of the 'docType' field */
    public com.architecting.ch07.Event.Builder setDocType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.docType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'docType' field has been set */
    public boolean hasDocType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'docType' field */
    public com.architecting.ch07.Event.Builder clearDocType() {
      docType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'partName' field */
    public java.lang.CharSequence getPartName() {
      return partName;
    }
    
    /** Sets the value of the 'partName' field */
    public com.architecting.ch07.Event.Builder setPartName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.partName = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'partName' field has been set */
    public boolean hasPartName() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'partName' field */
    public com.architecting.ch07.Event.Builder clearPartName() {
      partName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'partNumber' field */
    public java.lang.CharSequence getPartNumber() {
      return partNumber;
    }
    
    /** Sets the value of the 'partNumber' field */
    public com.architecting.ch07.Event.Builder setPartNumber(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.partNumber = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'partNumber' field has been set */
    public boolean hasPartNumber() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'partNumber' field */
    public com.architecting.ch07.Event.Builder clearPartNumber() {
      partNumber = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'version' field */
    public java.lang.Long getVersion() {
      return version;
    }
    
    /** Sets the value of the 'version' field */
    public com.architecting.ch07.Event.Builder setVersion(long value) {
      validate(fields()[5], value);
      this.version = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'version' field has been set */
    public boolean hasVersion() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'version' field */
    public com.architecting.ch07.Event.Builder clearVersion() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'payload' field */
    public java.lang.CharSequence getPayload() {
      return payload;
    }
    
    /** Sets the value of the 'payload' field */
    public com.architecting.ch07.Event.Builder setPayload(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.payload = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'payload' field has been set */
    public boolean hasPayload() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'payload' field */
    public com.architecting.ch07.Event.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Event build() {
      try {
        Event record = new Event();
        record.Id = fieldSetFlags()[0] ? this.Id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.eventId = fieldSetFlags()[1] ? this.eventId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.docType = fieldSetFlags()[2] ? this.docType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.partName = fieldSetFlags()[3] ? this.partName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.partNumber = fieldSetFlags()[4] ? this.partNumber : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.version = fieldSetFlags()[5] ? this.version : (java.lang.Long) defaultValue(fields()[5]);
        record.payload = fieldSetFlags()[6] ? this.payload : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
